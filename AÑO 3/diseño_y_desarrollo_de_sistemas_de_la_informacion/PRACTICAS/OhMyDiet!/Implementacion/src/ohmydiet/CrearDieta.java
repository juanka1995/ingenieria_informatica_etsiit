/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ohmydiet;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juanka1995
 */
public final class CrearDieta extends javax.swing.JFrame {

    DefaultTableModel model;
    Menu myMenu = null;
    java.sql.Date fecha;
    Map<String, String> mapaDisponibles;
    Map<String, String> mapaSeleccionados;
    
    /**
     * Creates new form CrearDieta
     */
    public CrearDieta() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    public CrearDieta(Menu unMenu) throws SQLException{
        initComponents();
        this.setLocationRelativeTo(null);
        myMenu = unMenu;
        jLabel2.setVisible(false);
        limpiarTablas();
        mapaDisponibles = new HashMap<>();
        mapaSeleccionados = new HashMap<>();
        rellenarTablaInicial();
    }
    
    public void limpiarTablas(){
        String [] titulo1 = {"RECETAS DISPONIBLES:"};
        model = new DefaultTableModel(null, titulo1);
        tablaDisponibles.setModel(model);
        
        String [] titulo2 = {"RECETAS SELECCIONADAS:"};
        model = new DefaultTableModel(null, titulo2);
        tablaSeleccionados.setModel(model);
    }
    
    public void limpiarTablaDisponibles(){
        String [] titulo1 = {"RECETAS DISPONIBLES:"};
        model = new DefaultTableModel(null, titulo1);
        tablaDisponibles.setModel(model);
    }
    
    public void limpiarTablaSeleccionados(){
        String [] titulo2 = {"RECETAS SELECCIONADAS:"};
        model = new DefaultTableModel(null, titulo2);
        tablaSeleccionados.setModel(model);
    }
    
    public void rellenarTablaInicial() throws SQLException{
        String [] titulo1 = {"RECETAS DISPONIBLES:"};
        String [] registros = new String[1];
        
        String sql = "SELECT * FROM receta";
        
        model = new DefaultTableModel(null, titulo1);
        
        Conectar cc = new Conectar();
        Connection cn = cc.conexion();
        
        if(cn != null){
            try{
                Statement st = cn.createStatement();
                ResultSet rs  = st.executeQuery(sql);

                while(rs.next()){
                registros[0]=rs.getString("titulo");
                mapaDisponibles.put(registros[0], rs.getString("id_receta"));
                model.addRow(registros);
                }

                tablaDisponibles.setModel(model);
            } catch (SQLException ex){
                JOptionPane.showMessageDialog(null, "Error en la conexión.\n"+ex);
            }       
        }
        else{
            JOptionPane.showMessageDialog(null, "Error al establecer la conexión.");
        }
    }
    
    public void rellenarTablaDisponiblesMapa(){
        limpiarTablaDisponibles();
        String [] registros = new String[1];
        Iterator<Map.Entry<String, String>> entries = mapaDisponibles.entrySet().iterator();
        while (entries.hasNext()) {
            Map.Entry<String, String> entry = entries.next();
            registros[0] = entry.getKey();
            model.addRow(registros);
        }
        tablaDisponibles.setModel(model);
    }
    
    public void rellenarTablaSeleccionadosMapa(){
        limpiarTablaSeleccionados();
        String [] registros = new String[1];
        Iterator<Map.Entry<String, String>> entries = mapaSeleccionados.entrySet().iterator();
        while (entries.hasNext()) {
            Map.Entry<String, String> entry = entries.next();
            registros[0] = entry.getKey();
            model.addRow(registros);
        }
        tablaSeleccionados.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDisponibles = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaSeleccionados = new javax.swing.JTable();
        derecha = new javax.swing.JButton();
        izquierda = new javax.swing.JButton();
        bAniadir = new javax.swing.JButton();
        bCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear dieta");

        tablaDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaDisponibles);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        tablaSeleccionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaSeleccionados);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        derecha.setText(">>");
        derecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                derechaActionPerformed(evt);
            }
        });

        izquierda.setText("<<");
        izquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izquierdaActionPerformed(evt);
            }
        });

        bAniadir.setText("Añadir");
        bAniadir.setEnabled(false);
        bAniadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAniadirActionPerformed(evt);
            }
        });

        bCancelar.setText("Cancelar");
        bCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarActionPerformed(evt);
            }
        });

        jLabel1.setText("Fecha de consumo:");

        try {
            dateChooserCombo1.setDefaultPeriods(new datechooser.model.multiple.PeriodSet());
        } catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
            e1.printStackTrace();
        }
        dateChooserCombo1.addCommitListener(new datechooser.events.CommitListener() {
            public void onCommit(datechooser.events.CommitEvent evt) {
                dateChooserCombo1OnCommit(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(derecha, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(izquierda, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bAniadir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addGap(16, 16, 16)
                                .addComponent(bAniadir, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(derecha, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(izquierda, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 54, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void izquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izquierdaActionPerformed
        int filaSelect = tablaSeleccionados.getSelectedRow();
        if(filaSelect != -1){
            String key = tablaSeleccionados.getValueAt(filaSelect, 0).toString();
            String value = mapaSeleccionados.get(key);
            mapaDisponibles.put(key, value);
            mapaSeleccionados.remove(key);
            rellenarTablaDisponiblesMapa();
            rellenarTablaSeleccionadosMapa();
        }
    }//GEN-LAST:event_izquierdaActionPerformed

    private void bCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarActionPerformed
        this.setVisible(false);
        myMenu.setVisible(true);
    }//GEN-LAST:event_bCancelarActionPerformed

    private void bAniadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAniadirActionPerformed
        jLabel2.setVisible(false);
        if(!mapaSeleccionados.isEmpty()){
            Conectar cc = new Conectar();
            Connection cn = null;
            try {
                cn = cc.conexion();
            } catch (SQLException ex) {
                Logger.getLogger(CrearDieta.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(cn != null){
                boolean todoOK = true;
                
                // Añadimos la nueva dieta a la base de datos
                PreparedStatement psInsertar = null;
                try {
                    psInsertar = cn.prepareStatement("INSERT INTO dieta values (?,?)");
                    psInsertar.setInt(1, myMenu.getNumRows());
                    psInsertar.setDate(2, fecha);
                    psInsertar.executeUpdate();
                } catch (SQLException ex) {
                    Logger.getLogger(CrearDieta.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                // Añadimos las recetas que corresponden a la dieta a la base de datos
                Iterator<Map.Entry<String, String>> entries = mapaSeleccionados.entrySet().iterator();
                while (entries.hasNext()) {
                    Map.Entry<String, String> entry = entries.next();
                    String sql = "INSERT INTO asignar (id_dieta,id_receta) VALUES ("+myMenu.getNumRows()+","+entry.getValue()+")";
                    try{
                        Statement st = cn.createStatement();
                        int rs  = st.executeUpdate(sql);
                    }catch (SQLException ex){
                        JOptionPane.showMessageDialog(null, "Error en la conexión.\n"+ex);
                        todoOK = false;
                    }
                }
                
                // Si todo ha ido bien mostramos el mensaje de verificacion
                if(todoOK){
                    JOptionPane.showMessageDialog(null, "Nueva dieta añadida correctamente.");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Error al establecer la conexión.");
            }
            
            // Limpiamos la tabla y la volvemos a rellenar con la dieta añadida
            myMenu.limpiarTabla();
            try {
                myMenu.rellenarTablaConDietas();
            } catch (SQLException ex) {
                Logger.getLogger(CrearDieta.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            // Cerramos la ventana
            this.dispose();
            
        }else{
            jLabel2.setText("¡Elija recetas!");
            jLabel2.setVisible(true);
        }
    }//GEN-LAST:event_bAniadirActionPerformed

    private void dateChooserCombo1OnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dateChooserCombo1OnCommit
        jLabel2.setText("¡Fecha invalida!");
        String auxFecha = dateChooserCombo1.getText();
        if(!auxFecha.isEmpty()){
            // el que parsea
            SimpleDateFormat parseador = new SimpleDateFormat("dd/MM/yy");
            // el que formatea
            SimpleDateFormat formateador = new SimpleDateFormat("yyyy/MM/dd");

            Date date = null;
            try {
                date = parseador.parse(auxFecha);
            } catch (ParseException ex) {
                Logger.getLogger(CrearDieta.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(date.compareTo(new Date()) > 0){
                fecha = new java.sql.Date(date.getTime());
                bAniadir.setEnabled(true);
                jLabel2.setVisible(false);
            }else{
                bAniadir.setEnabled(false);
                jLabel2.setVisible(true);
            }
        }
        else{
            bAniadir.setEnabled(false);
            jLabel2.setVisible(true);
        }
    }//GEN-LAST:event_dateChooserCombo1OnCommit

    private void derechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_derechaActionPerformed
        int filaSelect = tablaDisponibles.getSelectedRow();
        if(filaSelect != -1){
            String key = tablaDisponibles.getValueAt(filaSelect, 0).toString();
            String value = mapaDisponibles.get(key);
            mapaSeleccionados.put(key, value);
            mapaDisponibles.remove(key);
            rellenarTablaDisponiblesMapa();
            rellenarTablaSeleccionadosMapa();
        }
    }//GEN-LAST:event_derechaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearDieta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearDieta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearDieta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearDieta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrearDieta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAniadir;
    private javax.swing.JButton bCancelar;
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JButton derecha;
    private javax.swing.JButton izquierda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaDisponibles;
    private javax.swing.JTable tablaSeleccionados;
    // End of variables declaration//GEN-END:variables
}
